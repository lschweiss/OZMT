EC2 ZFS tools

A collection of tools to setup a ZFS pool of EBS devices on EC2.

Author: 
   Chip Schweiss
   chip.schweiss@wustl.edu

Background:   
   For a project I am managing we decided we want to backup our data in the cloud instead
   of traditional tapes being shipped off site.

   We already decided on using OpenIndiana for file storage with ZFS, and wanted
   to utilize ZFS send & receive to push changes to the cloud.

   Goals:
     1. Secure, meaning encrypted data in the cloud.
     2. Relatively inexpensive.
     3. Fully automated.
     4. Scalable
     5. Possibly be used for disaster recovery in the cloud.

   This collection of scripts were developed to deploy and maintain our ZFS backups in the
   cloud.   

   We anticipate approximately 1 TB total data to be backed up, with less than 50 GB to start.
   
   EBS storage is fixed in size when deployed and cannot be resized.  This may change in the future,
   but at the time of this development it is the case.  ZFS cannot restripe, but it can grow vertically
   if the underlying devices are replaced one at a time with larger devices.  

   I built my initial pool of 40 1GB EBS devices, striped in 5 vdevs of 8 EBS devices as raidz1.  The
   grow script I wrote will replace one EBS at a time in each vdev, wait for a resilver and replace the
   next until all have been replace.   This allows for in place growth of the storage and keeps
   the pool balanced and never requires restripe.   It can grow in increments of 40GB raw storage until 
   the EBS devices are at the EC2 max.  (1TB at the time of writing).

   The primary ZFS server also has ec2-api tools installed and controls the backup operation.  The
   EC2 instance is only turned on once a day to receive the day's worth of snapshots then shutdown.   
   This keeps running time per month very low and keeps the data locked since it is encrypted on
   EBS devices.   The encryption key is never stored on the EC2 instance.  It is supplied through
   an ssh tunnel from the primary site.  



Requirements:
 * Small instance or larger.  
 * If using a small instance swap space is required to run pool expansions
 * ec2-api-tools need to be installed and in the search path or referenced
   in the zfs-config.sh file.
 * JAVA_HOME must be set
 * EC2 keys need to be on the system and referenced in the zfs-config.sh file

If scripts are run on a machine other than the EC2 instance: (Recommended)
 * Public key authentication needs to be configured between the controlling
   machine and the EC2 instance.   
 * Since the EC2 instance will be under a different IP each boot turn
   off IP address checking on the ssh client by adding
        CheckHostIP no
        StrictHostKeyChecking ask
   to /etc/ssh/ssh_config



First copy zfs-config.sh.example to zfs-config.sh and configure it for your machine.

1. To create the pool of EBS devices run create-zfs-volumes.sh.  
2. Run create-zfs-pool.sh to create the pool.  If you have specified encryption in the config
   you will be prompted for the encryption key.   



To expand your pool vertically, you must use raidz1 or better.

1. Change the EBS size in the zfs-config.sh file.
2. Run grow-zfs-pool.sh

On a Small instance with 40 device pool in the example it will take about 1 1/2 to 2 hours 
to grow the pool.  The job will be significantly faster on larger instances.   



Running on a small instance:

Out of memory problems can occur when you grow your pool if you don't add swap space.   

Take advantage of the instance storage and setup swap space.  The setup-swap.sh will setup 
an 8GB swap for you.  Since instance storage is not persistent you will want to call this 
from your startup scripts.



Using encryption:

Make sure you have the right packages and modules installed.  On Ubuntu do the following:

sudo apt-get install cryptsetup
sudo echo aes-x86_64 >> /etc/modules
sudo echo dm_mod >> /etc/modules
sudo echo dm_crypt >> /etc/modules

Some commands will prompt you for the encryption key.   You will need to supply the crypto key 
after boot by calling setup-crypto.sh and mountall.



Running from a remote system:

These scripts are designed to run from outside the or inside the EC2 instance using the 
Amazon EC2 API.   Everything that must be run locally on the EC2 instance will be prepended with
a variable called 'remote' that is set in the config file.  This is meant to be something like 
'ssh root@myec2host.afraid.org'.  Make sure you have public key authentication setup to your
EC2 instance.

The config script has other variables that must be set for this to work properly.  See the
config example for more information.


